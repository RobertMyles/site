set.seed(1234)
xfun::pkg_attach(c("glue", "tidyr", "dplyr", "purrr", "rlang",
"sodium", "lubridate", "charlatan", "randNames"))
N <- 10
pii_data <- rand_names(N) %>%
mutate(
id = glue("{sample(letters, N)}-{sample(1:10, N)}-{sample(letters, N)}"),
credit_card = ch_credit_card_number(n = N),
cvv = ch_credit_card_security_code(10)
) %>%
select(id, starts_with("name"), email, gender, phone,
starts_with("location"), dob.date,
credit_card, cvv) %>%
mutate_all(as.character) %>%
mutate(spend = rnorm(N, 15, 5) %>% abs())
pii_data
pii_data %>%
mutate_if(is.character, ~{
data_encrypt(charToRaw(.x), quay, Nonce)
})
Nonce <- random(24)
quay <- sha256(charToRaw("super-secret"))
name <- "Andrea"
x <- data_encrypt(charToRaw(name), quay, Nonce)
y <- data_decrypt(x, quay, Nonce) %>% rawToChar()
pii_data %>%
mutate_if(is.character, ~{
data_encrypt(charToRaw(.x), quay, Nonce)
})
pii_data %>%
mutate_if(is.character, ~{
charToRaw(.x)
})
pii_data %>%
nest(-spend)
pii_data %>%
nest(-spend) %>%
mutate(data = map(data, ~{
charToRaw(.x)
}))
# vectorized version of charToRaw, needed for hashing
Rcpp::cppFunction('List charToRaw_cpp(CharacterVector x) {
int n = x.size();
List l = List(n);
for (int i = 0; i < n; ++i) {
int nc = LENGTH(x[i]);
RawVector ans = RawVector(nc);
memcpy(RAW(ans), CHAR(x[i]), nc);
l[i] = ans;
}
return l;
}')
pii_data %>%
nest(-spend) %>%
mutate(data = map(data, ~{
charToRaw_cpp(.x)
}))
pii_data %>%
nest(-spend)
pii_data %>%
mutate_if(is.character, charToRaw_cpp)
pii_data <- rand_names(N) %>%
mutate(
id = glue("{sample(letters, N)}-{sample(1:10, N)}-{sample(letters, N)}"),
credit_card = ch_credit_card_number(n = N),
cvv = ch_credit_card_security_code(10)
) %>%
select(id, starts_with("name"), email, gender, phone,
starts_with("location"), dob.date,
credit_card, cvv) %>%
mutate_all(as.character) %>%
mutate(spend = rnorm(N, 15, 5) %>% abs() %>% round(2))
pii_data
set.seed(1234)
N <- 10
pii_data <- rand_names(N) %>%
mutate(
id = glue("{sample(letters, N)}-{sample(1:10, N)}-{sample(letters, N)}"),
credit_card = ch_credit_card_number(n = N),
cvv = ch_credit_card_security_code(10)
) %>%
select(id, starts_with("name"), email, gender, phone,
starts_with("location"), dob.date,
credit_card, cvv) %>%
mutate_all(as.character) %>%
mutate(spend = rnorm(N, 15, 5) %>% abs() %>% round(2))
pii_data
pii_data %>%
mutate_if(is.character, charToRaw_cpp) %>%
mutate(spend = spend * 100)
pii_data %>%
mutate_if(is.character, charToRaw_cpp) %>%
mutate(spend = spend * 100) %>%
mutate(spend = enc(k$pk, spend))
library(HomomorphicEncryption)
p <- pars("FandV")
k <- keygen(p)
pii_data %>%
mutate_if(is.character, charToRaw_cpp) %>%
mutate(spend = spend * 100) %>%
mutate(spend = enc(k$pk, spend))
pii_data %>%
mutate_if(is.character, charToRaw_cpp) %>%
mutate(spend = spend * 100) %>%
mutate(
spend_list = list(NA_real_),
spend_list = map(spend_list, ~{
enc(k$pk, .x$spend)
})
)
pii_data %>%
mutate_if(is.character, charToRaw_cpp) %>%
mutate(spend = spend * 100) %>%
mutate(
spend_list = list(NA_real_))
pii_data %>%
mutate_if(is.character, charToRaw_cpp) %>%
mutate(spend = spend * 100) %>%
mutate(
spend_list = list(NA_real_),
spend_list = map(spend_list, ~{
enc(k$pk, .x$spend)
})
)
pii_data %>%
mutate_if(is.character, charToRaw_cpp) %>%
mutate(spend = spend * 100) %>%
mutate(
spend_list = list(NA_real_),
spend_list = map(spend_list, ~{
"hello"
})
)
pii_data %>%
mutate_if(is.character, charToRaw_cpp) %>%
mutate(spend = spend * 100) %>%
mutate(
spend_list = list(spend))
pii_data %>%
mutate_if(is.character, charToRaw_cpp) %>%
mutate(spend = spend * 100) %>%
nest(spend)
pii_data %>%
mutate_if(is.character, charToRaw_cpp) %>%
mutate(spend = spend * 100) %>%
nest(spend)
pii_data %>%
mutate_if(is.character, charToRaw_cpp) %>%
mutate(spend = spend * 100) %>%
mutate(
spend = map(spend, spend))
pii_data %>%
mutate_if(is.character, charToRaw_cpp) %>%
mutate(spend = spend * 100) %>%
mutate(
spendlist = map(spend, ~{.x}))
pii_data %>%
mutate_if(is.character, charToRaw_cpp) %>%
mutate(spend = spend * 100) %>%
mutate(
spendlist = map(spend, ~{.x})) %>% select(spendlist) %>% unnest()
pii_data %>%
mutate_if(is.character, charToRaw_cpp) %>%
mutate(spend = spend * 100) %>%
mutate(
spend = map(spend, ~{.x}),
spend = map(spend, ~{
enc(k$pk, .x)
})
)
?charToRaw
pii_data %>%
mutate_if(is.character, charToRaw_cpp) %>%
mutate_if(!is.numeric, ~{
data_encrypt(.x, key = quay, nonce = Nonce)
})
pii_data %>%
mutate_if(is.character, charToRaw_cpp) %>%
mutate_if(is.raw, ~{
data_encrypt(.x, key = quay, nonce = Nonce)
})
pii_data %>%
mutate_if(is.character, charToRaw_cpp) %>%
mutate_if(is.raw, ~{
data_encrypt(.x, key = quay, nonce = Nonce)
}) %>%
mutate(spend = spend * 100) %>%
mutate(
spend = map(spend, ~{.x}),
spend = map(spend, ~{
enc(k$pk, .x)
})
) -> pii_encrypted
pii_encrypted
pii_data %>%
mutate_if(is.character, charToRaw_cpp) %>%
mutate_if(is.raw, ~{
data_encrypt(.x, key = quay, nonce = Nonce)
}) %>%
mutate(spend = spend * 100) %>%
mutate(
spend = map(spend, ~{.x}),
spend = map(spend, ~{
enc(k$pk, .x)
})
) -> pii_encrypted
pii_encrypted
pii_encrypted %>% select(spend)
?pars
pii_encrypted
pii_encrypted %>% select(gender)
pii_encrypted %>% select(gender) %>% mutate(gender_marker = unlist(gender))
pii_encrypted %>% select(gender) %>% mutate(gender_marker =flatten(gender))
pii_encrypted %>% select(gender) %>% mutate(gender_marker = map(gender, rawToChar))
pii_encrypted %>% select(gender) %>% mutate(gender_marker = map(gender, rawToChar) %>% flatten)
pii_encrypted %>% select(gender) %>% mutate(gender_marker = map(gender, rawToChar) %>% flatten())
pii_encrypted %>% select(gender) %>% mutate(gender_marker = map(gender, rawToChar) %>% unlist())
pii_encrypted %>% select(gender) %>% mutate(gender_marker = map(gender, as.character) %>% unlist())
pii_encrypted %>% select(gender) %>%
mutate(gender_marker = map(gender, ~{
x = as.character(.x)
x = stringi::stri_rand_shuffle(x)
x
}) %>% unlist())
pii_encrypted %>% select(gender) %>%
mutate(gender_marker = map(gender, ~{
x = as.character(.x)
x = stringi::stri_rand_shuffle(x)
x
}))
pii_encrypted %>% select(gender) %>%
mutate(gender_marker = map(gender, ~{
x = as.character(.x)
x = stringi::stri_rand_shuffle(x)
x
}) %>% flatten())
pii_encrypted %>% select(gender) %>%
mutate(gender_marker = map(gender, ~{
x = as.character(.x)
x = stringi::stri_rand_shuffle(x)
x
}) %>% flatten() %>% flatten())
pii_encrypted %>% select(gender) %>%
mutate(gender_marker = map(gender, ~{
x = as.character(.x)
x = stringi::stri_rand_shuffle(x)
x
})) %>% unnest(gender_marker)
pii_encrypted %>% select(gender) %>%
mutate(gender_marker = map(gender, ~{
x = as.character(.x)
x
})) %>% unnest(gender_marker)
pii_encrypted %>% select(gender) %>%
mutate(gender_marker = map(gender, ~{
x = as.character(.x)
x
}) %>% unlist())
pii_encrypted %>% select(gender) %>%
mutate(gender_marker = map(gender, ~{
x = as.character(.x)
x
})) %>% unnest()
pii_encrypted %>% select(gender) %>%
mutate(gender_marker = map(gender, ~{
x = as.character(.x)
x
})) %>% unnest(gender_marker)
pii_data %>%
group_by(gender) %>%
nest() %>%
mutate(genX = map_chr(gender, ~{
glue("{sample(letters, 1)}-{random()}-{sample(letters, 1)}")
}))
pii_data %>%
group_by(gender) %>%
nest() %>%
mutate(genX = map_chr(gender, ~{
glue("{sample(letters, 1)}-{random()}-{sample(letters, 1)}")
})) %>%
unnest(cols = c(data)) %>%
mutate_if(is.character, charToRaw_cpp) %>%
mutate_if(is.raw, ~{
data_encrypt(.x, key = quay, nonce = Nonce)
}) %>%
mutate(spend = spend * 100) %>%
mutate(
spend = map(spend, ~{.x}),
spend = map(spend, ~{
enc(k$pk, .x)
})
) -> pii_encrypted
pii_encrypted
pii_data %>%
group_by(gender) %>%
nest() %>%
mutate(genX = map_chr(gender, ~{
glue("{sample(letters, 1)}-{random()}-{sample(letters, 1)}")
})) %>%
unnest(cols = c(data)) %>%
ungroup() %>%
mutate_if(is.character, charToRaw_cpp) %>%
mutate_if(is.raw, ~{
data_encrypt(.x, key = quay, nonce = Nonce)
}) %>%
mutate(spend = spend * 100) %>%
mutate(
spend = map(spend, ~{.x}),
spend = map(spend, ~{
enc(k$pk, .x)
})
) -> pii_encrypted
pii_encrypted
pii_data %>%
group_by(gender) %>%
nest() %>%
mutate(genX = map_chr(gender, ~{
glue("{sample(letters, 1)}-{random()}-{sample(letters, 1)}")
})) %>%
unnest(cols = c(data)) %>%
ungroup() %>%
mutate_if(is.character, charToRaw_cpp) %>%
mutate_if(is.raw, ~{
data_encrypt(.x, key = quay, nonce = Nonce)
}) %>%
mutate(spend = spend * 100) %>%
mutate(
spend = map(spend, ~{.x}),
spend = map(spend, ~{
enc(k$pk, .x)
})
) %>%
unnest(genX) %>%
mutate(genX = rawToChar(genX)) %>%
select(genX, everything()) -> pii_encrypted
pii_encrypted
pii_data %>%
group_by(gender) %>%
nest() %>%
mutate(genX = map_chr(gender, ~{
glue("{sample(letters, 1)}-{random()}-{sample(letters, 1)}")
})) %>%
unnest(cols = c(data)) %>%
ungroup() %>%
group_by(genX) %>%
mutate_if(is.character, charToRaw_cpp) %>%
mutate_if(is.raw, ~{
data_encrypt(.x, key = quay, nonce = Nonce)
}) %>%
ungroup() %>%
mutate(spend = spend * 100) %>%
mutate(
spend = map(spend, ~{.x}),
spend = map(spend, ~{
enc(k$pk, .x)
})
) -> pii_encrypted
pii_encrypted
pii_data %>%
group_by(gender) %>%
nest() %>%
mutate(genX = map_chr(gender, ~{
glue("{sample(letters, 1)}-{random()}-{sample(letters, 1)}")
})) %>%
unnest(cols = c(data)) %>%
ungroup() %>%
group_by(genX) %>%
mutate_if(is.character, charToRaw_cpp) %>%
mutate_if(is.raw, ~{
data_encrypt(.x, key = quay, nonce = Nonce)
}) %>%
ungroup() %>%
mutate(spend = spend * 100) %>%
mutate(
spend = map(spend, ~{.x}),
spend = map(spend, ~{
enc(k$pk, .x)
})
) %>%
select(genX, everything()) -> pii_encrypted
pii_encrypted
pii_encrypted <- pii_encrypted %>%
mutate(sum_enc = list(rep(0, 1)))
pii_encrypted <- pii_encrypted %>%
pii_encrypted
for(i in 1:nrow(pii_encrypted)) {
# take existing value for length-1 vectors:
if (attributes(pii_encrypted$spend[[i]])$class[1] == "Rcpp_FandV_ct") {
pii_encrypted$sum_enc[[i]] <- dec(k$sk, pii_encrypted$spend[[i]])
pii_encrypted$sum_enc[[i]] <- pii_encrypted$spend[[i]]
} else {
# sum up longer vectors:
pii_encrypted$sum_enc[[i]] <- dec(k$sk, sum(pii_encrypted$spend[[i]]))
pii_encrypted$sum_enc[[i]] <- sum(pii_encrypted$spend[[i]])
}
}
pii_encrypted
pii_encrypted %>% select(sum_enc)
for(i in 1:nrow(pii_encrypted)) {
# take existing value for length-1 vectors:
if (attributes(pii_encrypted$spend[[i]])$class[1] == "Rcpp_FandV_ct") {
pii_encrypted$sum_enc[[i]] <- dec(k$sk, pii_encrypted$spend[[i]])
pii_encrypted$sum_enc[[i]] <- pii_encrypted$spend[[i]]
} else {
# sum up longer vectors:
pii_encrypted$sum_enc[[i]] <- dec(k$sk, sum(pii_encrypted$spend[[i]]))
pii_encrypted$sum_enc[[i]] <- sum(pii_encrypted$spend[[i]])
}
}
pii_data %>%
group_by(gender) %>%
nest() %>%
mutate(genX = map_chr(gender, ~{
glue("{sample(letters, 1)}-{random()}-{sample(letters, 1)}")
})) %>%
unnest(cols = c(data)) %>%
ungroup() %>%
group_by(genX) %>%
mutate_if(is.character, charToRaw_cpp) %>%
mutate_if(is.raw, ~{
data_encrypt(.x, key = quay, nonce = Nonce)
}) %>%
ungroup() %>%
mutate(spend = spend * 100) %>%
mutate(
spend = map(spend, ~{.x}),
spend = map(spend, ~{
enc(k$pk, .x)
})
) %>%
select(genX, everything()) -> pii_encrypted
pii_encrypted <- pii_encrypted %>%
mutate(sum_enc = list(rep(0, 1)))
for(i in 1:nrow(pii_encrypted)) {
# take existing value for length-1 vectors:
if (attributes(pii_encrypted$spend[[i]])$class[1] == "Rcpp_FandV_ct") {
pii_encrypted$sum_enc[[i]] <- dec(k$sk, pii_encrypted$spend[[i]])
pii_encrypted$sum_enc[[i]] <- pii_encrypted$spend[[i]]
} else {
# sum up longer vectors:
pii_encrypted$sum_enc[[i]] <- dec(k$sk, sum(pii_encrypted$spend[[i]]))
pii_encrypted$sum_enc[[i]] <- sum(pii_encrypted$spend[[i]])
}
}
View(pii_encrypted)
pii_encrypted %>%
mutate(
spend_decrypted = map_dbl(sum_enc, ~{
dec(k$sk, .x)
}),
spend_decrypted = spend_decrypted/100
)
pii_data %>%
group_by(gender) %>%
nest() %>%
mutate(genX = map_chr(gender, ~{
glue("{sample(letters, 1)}-{random()}-{sample(letters, 1)}")
})) %>%
unnest(cols = c(data)) %>%
ungroup() %>%
group_by(genX) %>%
mutate_if(is.character, charToRaw_cpp) %>%
mutate_if(is.raw, ~{
data_encrypt(.x, key = quay, nonce = Nonce)
}) %>%
ungroup() %>%
mutate(spend = spend * 100) %>%
mutate(
spend = map(spend, ~{.x}),
spend = map(spend, ~{
enc(k$pk, .x)
})
) %>%
select(genX, everything()) -> pii_encrypted
pii_encrypted %>%
group_by(genX) %>%
nest() %>%
mutate(sum_enc = list(rep(0, 1)))
pii_encrypted_2 <- pii_encrypted %>%
group_by(genX) %>%
nest() %>%
mutate(sum_enc = list(rep(0, 1)))
pii_encrypted_2 <- pii_encrypted
pii_encrypted <- pii_encrypted %>%
group_by(genX) %>%
nest() %>%
mutate(sum_enc = list(rep(0, 1)))
for(i in 1:nrow(pii_encrypted)) {
# take existing value for length-1 vectors:
if (attributes(pii_encrypted$spend[[i]])$class[1] == "Rcpp_FandV_ct") {
pii_encrypted$sum_enc[[i]] <- dec(k$sk, pii_encrypted$spend[[i]])
pii_encrypted$sum_enc[[i]] <- pii_encrypted$spend[[i]]
} else {
# sum up longer vectors:
pii_encrypted$sum_enc[[i]] <- dec(k$sk, sum(pii_encrypted$spend[[i]]))
pii_encrypted$sum_enc[[i]] <- sum(pii_encrypted$spend[[i]])
}
}
View(pii_encrypted_2)
View(pii_encrypted)
View(pii_encrypted_2)
View(pii_encrypted[[2]][[1]])
pii_encrypted %>% map(data, ~{.x$spend})
pii_encrypted %>% map(data, map(.x, .x$sum_enc))
pii_encrypted %>% map(data, ~map(.x, ~{.x$sum_enc}))
map(pii_encrypted$data, ~map(.x, ~{.x$sum_enc}))
map(pii_encrypted$data, ~{.x$sum_enc}))
map(pii_encrypted$data, ~{.x$sum_enc})
map(pii_encrypted$data, ~{.x$spemnd})
map(pii_encrypted$data, ~{.x$spend})
View(pii_encrypted[[2]][[1]])
map(pii_encrypted$data, ~{dec(k$pk, .x$spend)})

{
  "hash": "97bcd421a29176c32880f21eb0200a29",
  "result": {
    "markdown": "---\ntitle: Gauge-style plots with ggplot2\ndate: \"2017-10-24\"\nimage: \"images/gauge-2.png\"\ncategories: [dataViz]\n---\n\n\nI've been working on a project where the client wanted a \"cockpit\" style dashboard, with meter/gauge/speedometer type things. Even though this wasn't likely to be implemented in R for the final version, I started thinking about how I could do this with ggplot2, influenced by some code from [here](https://www.r-graph-gallery.com/80-circular-barplot/). Base R graphics are likely a much better fit for something like this, as [Gaston Sanchez's example](https://www.gastonsanchez.com/visually-enforced/how-to/2013/01/10/Gauge-Chart-in-R/) shows, but I actually quite like the result with ggplot2. It's not so speedometery, so that's a good thing in my book.\n\nAnywayz, here is what it looks like, with how I did it to follow:\n\n![](images/gauge-1.png)\n\nSo, it's not very generalizable by nature, since labels for each bar start to get difficult with more than three or four categories, so I recommend doing this with just that low number of bars. You could go wild, of course, but then the labels are better off of the plot, and the bars start to lose their smooth lines. I've used viridis for this, but it gives the false impression of a changing scale moving through the radius, so it's better to sample these colours from a palette or do it manually.\n\n![](images/gauge-2.png)\n\nSo here's the code to do the first plot (the colours are sampled, so running this you'll get different ones). The trick involves using a transparent bars that go to 100, and a second set that go to 50.\n\n\n::: {.cell hash='gauge_cache/html/unnamed-chunk-1_097ed8f29b9172a6fa8e3f7e96457031'}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(scales)\n\n# example data:\ndf <- data_frame(group = c(\"Cat. 1\", \"Cat. 2\", \"Cat. 3\", \"Cat. 4\"),\n                 value = sample(20:70, 4))\n\n# scale everything and set labels:\ndf <- df %>%\n  filter(!is.na(group)) %>%\n  mutate(group2 = gsub(\" \", \"\\n\", group),\n         group = ifelse(toupper(group) == \"A\", \"Temp@\", group)) %>%\n  add_row(group = \"A\", value = 0, .before = 1) %>%\n  mutate(value_scale = rescale(value, to = c(0, 100)),\n         value_sc_half = rescale(value_scale, to = c(0, 50)),\n         aim = rep(50, nrow(.)))\n\ndf_sub <- filter(df, group != \"A\")\n\n# colours:\ncol_vec <- c(\"#440154FF\", \"#404788FF\", \"#2D708EFF\", \"#29AF7FFF\",\n             \"#55C667FF\",\"#2E6171\", \"#685369\", \"#191D32\")\n\n# graph\nggplot(df, aes(x = group, fill = group)) +\n  geom_bar(width = 0.85, stat=\"identity\", aes(y = value_scale),\n           colour = \"white\", fill = \"white\") +\n  geom_bar(data = df_sub, aes(y = aim), width = 0.85,\n           stat = \"identity\", fill = \"white\", colour = \"grey68\") +\n  geom_bar(data = df_sub, width = 0.85, stat = \"identity\",\n           aes(y = value_sc_half, fill = group2), colour = \"black\") +\n  coord_polar(theta = \"y\", start = -1.57) +\n  theme_classic() +\n  xlab(\"\") + ylab(\"\") +\n  theme(legend.position = \"none\") +\n  geom_text(data = df_sub, vjust = 1.4, size = 3,\n           aes(x = group, y = 0, label = group2)) +\n  geom_text(data = df_sub, aes(x = group, y = 50), label = \"Aim\",\n            colour = \"grey68\", vjust = -1) +\n  scale_fill_manual(values = sample(col_vec)) +\n  theme(axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        axis.line = element_blank(),\n        plot.margin = margin(t = 0, r = 0, b = 0, l = 0, unit = \"pt\"))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
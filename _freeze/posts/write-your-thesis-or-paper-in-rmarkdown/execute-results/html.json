{
  "hash": "bb4bbad1fed1d9a1a3fa332cd347e17e",
  "result": {
    "markdown": "---\ntitle: Write your thesis or paper in R Markdown!\ndate: \"2016-04-15\"\ncategories: [rmarkdown]\nexecute: \n  eval: false\n---\n\n\nThere are many reasons why you would want to use some variant of Markdown for writing, and indeed, posts are common on the net as to why you should.[^1] A simple summary of the reasons are that Markdown is: 1) easy; 2) easy; 3) yup, you guessed it â€“ itâ€™s easy.\n\n[^1]: For example, [this cheatsheet](https://markdown-guide.readthedocs.org/en/latest/basics.html)\n\nOne variant of Markdown is R Markdown, developed by the [RStudio](https://www.rstudio.com/) team, and in particular [Yihui Xie](https://yihui.name/knitr/), creator of the `knitr` R package. R Markdown is pretty much like regular Markdown, except you get a whole load of nice extra features, including the ability to run code chunks, produce .pdfs and presentations, and even .docx (if you really, really want to[^2]). Indeed, the ioslides presentation format lets you use the power of html and css to make browser-based presentations.\n\n[^2]: In my experience, I think youâ€™re just going to end up editing these in Word anyway so I donâ€™t know that itâ€™s worth the bother to do in RStudio. You can if you want, I suppose.\n\nBut surely academic papers require certain formats, and sometimes mathematical expressions and funny Greek letters? Well, sure. Academic papers, particularly theses, often have set formats that you must adhere to. And since Markdown is quite a simple language, it doesnâ€™t have the advanced power of $\\LaTeX$ to position things in specific ways.\n\n### $\\LaTeX$ in R Markdown\n\nEnter R Markdown! Although you might (depends on the Markdown) have to do something like `{% raw %}\\\\(\\LaTeX\\\\){% endraw %}` to get the word $\\LaTeX$ in your Markdown, with R Markdown itâ€™s just `$ \\LaTeX $`. I used Mathjax characters in my thesis, and all worked fine using this method ([hereâ€™s](https://www.onemathematicalcat.org/MathJaxDocumentation/TeXSyntax.htm) a nice link showing all the possible characters you can create with Mathjax). Nice â€˜nâ€™ easy, lemon squeezy. Inline $\\LaTeX$ expressions get one `$`, centred equations get two: `$$`, and both need the equivalent to finish the expression. For example, in my first [post](https://www.robertmylesmcdonnell.com/content/posts/stan-or-jags-for-bayesian-ideal-point-irt/), I had the equation:\n\n$$\ny_{ij} = \\beta_j\\bf{x_i} - \\alpha_j\n$$\n\nIn R Markdown, this is:\n\n```         \n`$$ y_{ij} = \\beta_j\\boldsymbol{x_i} - \\alpha_j $$`\n```\n\nSimple!\n\nSo thatâ€™s math and funny characters done. What else can we do in R Markdown?\n\n### Images\n\nWell, all the image-placement power of $\\LaTeX$ is also available. So `\\begin{figure}` (or subfigure and wrapfigure), `\\centering`, `\\includegraphics` and `\\caption` all work as they should. I found minipage to be particularly helpful. You can use `\\` with two spaces after it to organise blank space, or `\\newpage` to force a new page.\n\nOf course, that supposing that you want to use $\\LaTeX$ for images. R Markdownâ€™s own syntax for images is quite simple: `![Caption](file.png)`, where â€˜Captionâ€™ is your image caption and â€˜file.pngâ€™ your image file (you can use other formats, such as .pdf too). However, positioning may become a problem using this image-placing syntax. Itâ€™s worth taking the extra time to learn the $\\LaTeX$ if you donâ€™t know it.\n\n### Tables\n\nTables are a *little* annoying sometimes in any Markdown. It depends. If the simple one works for you, then great â€“ theyâ€™re quick and easy. If you have to use grid tables, things take longer (for some reason, only grid tables worked for me sometimes). Thereâ€™s a [simple guide](https://pandoc.org/README.html#tables) on the pandoc site, since it is pandoc that is actually converting to and fro in all these different formats (pandoc is amazing). But a basic one is *really* simple (from the pandoc site):\n\n![Table](images/pandoctable.png)\n\nThe table numbers will automatically increment, and the caption is set after the `:` part. Indeed, `table` is not even needed, using `:` with give you a caption with `Table 1:`, for your first table in the document.\n\n### Code\n\nThere may be a need for you to display code segments, particularly in a quantitative paper or thesis. Again, itâ€™s very simple. In R Markdown, you do the following (Iâ€™m using `eval = FALSE` here because I donâ€™t want the code chunk to be evaluated), and the block goes inside three back ticks on either end:\n\n\n::: {.cell hash='write-your-thesis-or-paper-in-rmarkdown_cache/html/unnamed-chunk-1_5ec9d3386e147bec6a769eb6d4487167'}\n\n```{.r .cell-code}\nlibrary(\"readr\") \ndata <- read_csv(\"example.csv\") \ndata <- data\\[1:6, \\]\n```\n:::\n\n\nThis useful for plotting simple graphs and things like that. The example Iâ€™ve shown *wouldnâ€™t* be a particularly good idea, since R will load in `example.csv` every time you produce the pdf using the â€˜knitâ€™ button in RStudio. The `{r}` prt also has optional arguments, such as `eval`, which can be set to `TRUE` or `FALSE`, and tells R Markdown whether to evaluate the expression or not (useful for examples where you want to show the code but not run it).\n\n### Chapters and Headings\n\nChapters and Headings are laughably simple in any Markdown, and R Markdown is no exception. `# Header 1` will create the largest-sized header, `## Header 2` a smaller one, and so on. To have these numbered, weâ€™ll have to use another excellent feature of Markdown, the YAML block that goes on the top of the document.\n\n### The YAML block\n\nThe YAML block is what makes your R Markdown document possibly really fancy. Itâ€™s here that the $\\LaTeX$ packages are loaded, and here that you can specify various options that will have an impact on your document. So what the hell *is* a YAML block, anyway? Well, maybe the easiest way to explain that is to show you mine[^3] from my PhD [thesis](https://www.robertmylesmcdonnell.com/Robert_Myles_McDonnell_thesis.pdf). It starts and ends with `---`.\n\n[^3]: Iâ€™m including extra things here that I used over the process of making the thesis pdf, but it wasnâ€™t what I used exactly in the end. I had some problems, that I canâ€™t recall right now, with rendering bibliographical items so I switched to the default $\\LaTeX$ renderer, pdflatex. Using this means you canâ€™t use other fonts, like the Linux Libertine font above.\n\n```         \n---\ntitle: \"Explaining the Determinants...\" author: \"Robert Myles McDonnell\" date: \"\" fontsize: 12pt header-includes: -\n\n\\usepackage{booktabs}\n\n-   \\usepackage{dcolumn}\n\n    -   \\usepackage{wrapfig}\n\n        -   \\usepackage{subcaption}\n\n            -   \\usepackage{caption}\n\n                -   \\usepackage[font=small,labelfont=bf]{caption}\n\n                    -   \\hypersetup{colorlinks=false}\n\n                        documentclass: \"article\" output: pdf_document: fig_caption: yes fig_height: 6 fig_width: 7 latex_engine: pdflatex number_sections: yes toc: yes toc_depth: 4 citation_package: \"natbib\" linestretch: 2 mainfont: \"Linux Libertine O\" bibliography: ThesisLibrary.bib csl: american-political-science-association.csl biblio-style: apalike\n---\n```\n\nSo, thatâ€™s quite extended, but maybe you wonâ€™t need all these things. One important thing to remember with the YAML block is that indentation *matters*. When you have something like `output:`, then the line `pdf document:` is **two** spaces indented. `fig_caption: yes` is **two more** spaces indented (four in total) and so are the other options to pdf_document. If you get your spacing wrong, it wonâ€™t work.\n\nMany of the options are self-explanatory: `linestretch` is line-spacing, for example. One important option is `toc` and its option `toc_depth`. This is the **t**able **o**f **c**ontents. `toc_depth` is telling R Markdown how many levels youâ€™d like: Chapter 4.1, Chapter 4.1.1 etc. More advanced elements can be changed too. For example, this thesis had a `documentclass` of article, but you can write your own document class and therefore produce radically different documents. One example is an R Markdown [version](https://github.com/danielkrizian/resume_template) of Friggeriâ€™s popular CV template. Other examples are rapidly proliferating on the web. The RStudio team have a new R package [rticles](https://github.com/rstudio/rticles) that has document templates for various academic journal styles. Load â€™em up, and youâ€™ve already got an easy R Markdown template for the journal in question. And for papers, enable the `abstract:` option in the YAML header, write your abstract there, and voilÃ ! Youâ€™ve got yourself a nice abstract.\n\nSo if writing your thesis (or a paper) in Microsoft Word or something similar sounds like an ordeal, and youâ€™re really not such an expert on $\\LaTeX$, maybe you should consider doing it in R Markdown. It has all the easiness of Markdown, with a couple of nice extras that help you make a quality document. See my thesis if you donâ€™t believe me! ðŸ˜‰\n\nUpdate:\\\nA colleague asked me how I produced the first few pages of my thesis, and I realised that I forgot to mention that you can include other documents, for example tex files, that may need to be part of your thesis. Many theses have strict guidelines for the introductory pages, which can be included in your R Markdown file as part of the YAML header section. The option is `includes`, and it has the sub-options `in_header`, `before_body` and `after body`. Like before, the spacing is meaningful in the YAML header, so these sub-options will need to be indented two spaces. For introductory pages of a thesis, your tex file will go in `before_body`. (I have to admit that this option never worked well for me, I simply merged the .pdf produced from the tex file and the .pdf produced from the R Markdown document with Preview in OS X, but for others, it seems to work fine.) See [here](https://rmarkdown.rstudio.com/markdown_document_format.html) for examples. See [here](https://github.com/danilofreire/kcl-thesis-template-markdown) for a Markdown template for Kingâ€™s College Londonâ€™s PhD guidelines, by [Danilo Freire](https://github.com/danilofreire).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "9c682c06c233f1d6b5123a33045b449d",
  "result": {
    "markdown": "---\ntitle: \"Improving your DataViz\"\ndate: \"7/23/2019\"\ncategories: [dataViz]\n---\n\n\nimport SimpleBarChart from \"../graphs/SimpleBarChart.js\" import data from \"../data/divorceTurnout2019.json\"\n\n\n\n\n\nA while ago, I [posted](https://www.robertmylesmcdonnell.com/content/posts/d3_in_MDX/) about including D3 charts in MDX documents. I was pretty chuffed at my little D3-React bar chart (with tooltips!), but that was mainly to do with me being technically able to do it, not because it was a beautiful piece of data visualization (it isn't). In `$DAYJOB`, I've been thinking more about dataviz and the science behind it, and along with a talented colleague of mine, I'm preparing a data visualization guide for our data science team. You'd think Data Scientists would be pretty well clued-in on dataviz, but that's not always the case. I thought I'd revisit my own horrific dataviz crime and go through a step-by-step process of ways we could improve it. Good data visualization is always about the **message** you want to convey -- what interests me in these data is the overwhelming [Yes](https://www.robertmylesmcdonnell.com/content/posts/divorce-ireland/) vote, so that's what I'll be concentrating on highlighting. It's also a nice opportunity to highlight mistakes often made, and that I often make when making dataviz without thinking too deeply about it.[^1] I suppose one challenge we face here is that there is no external comparison -- the strong 'Yes' vote is not being compared to any previous referenda. We'll change that later on.\n\n[^1]: A good example is the final plot [here](https://www.robertmylesmcdonnell.com/content/posts/divorce-ireland/). I really should have had the bright colours in the gradient as the *low* end of the turnout scale, not the high end. Ah well.\n\nTo remind you of what we're talking about, here's the chart I originally posted:\n\n<SimpleBarChart data={data} height={900} width={1080} />\n\n### So what's wrong with this?\n\nWell, there are a couple of things that are not ideal with this chart. First of all, it's hard to compare exact numbers in the different constituencies, although the tooltips help us to escape that a little bit. Secondly, the bars are very visually dominant and your eye gets drawn to their centre, and not to the right-hand side, which is where the important information that the bars is trying to convey is found. While the wall of bars does kind of convey the 'overwhelming \"Yes\"' that I was trying to get at, I think there must be better ways, and we could definitely think about the x-axis. Thirdly, although I like the colour scale, it doesn't really add much, if anything, to the chart.\n\nThere are some difficulties involved in plotting this dataset -- mainly that we have a lot of 'categories' (the constituencies, all 40 of them), and that there is very little variation in the other variable of interest, the turnout. To get an idea of what I mean, have a look at the following plot, showing the spread of values of the turnout across the constituencies:\n\n\n::: {.cell hash='betterDataViz_cache/html/unnamed-chunk-1_45abe225ca2f521b16a21e0c9b6a4aeb'}\n\n:::\n\n::: {.cell layout-align=\"center\" hash='betterDataViz_cache/html/unnamed-chunk-2_25a4fb03d211ed69015a9ae67c8c5a41'}\n\n:::\n\n\nI've left in the full x-axis to show the problem clearly -- most of our data falls in a pretty narrow range. The combination of these two things, the thin spread across many categories, means it's a good dataset to explore visually, since the optimal solution is not immediately apparent (to me, at least).\n\n### Setup\n\nI'm going to use R and ggplot2 for this exploration. The principles we'll explore are not tied to these tools, I just think they're the best available for what we need to do here. I'll leave all the code in so that anybody interested can copy and paste, but like I said, this is not an R-specific exercise.\n\nLet's get our data and load the libraries we'll use.\n\n\n::: {.cell hash='betterDataViz_cache/html/unnamed-chunk-3_4964dcbfd38b850f1a16855bd8e4873e'}\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(glue)\n\ndf <- read_csv(\"https://raw.githubusercontent.com/RobertMyles/blogdata/master/divorceRef2019turnout.csv\")\n```\n:::\n\n\nThis dataset looks like this (first 6 lines):\n\n\n::: {.cell hash='betterDataViz_cache/html/unnamed-chunk-4_33f36ac7ffa18d9d775cb99c7ad38689'}\n\n```{.r .cell-code}\ndf %>% head() %>% knitr::kable()\n```\n:::\n\n\n### First attempts\n\nSo, like I did with D3, I suppose one of the first things you would do with a dataset like this (assuming you want to plot both variables) is to make some type of bar chart. Since we have long names for our categories, the best option is a bar chart with the categories on the y-axis. It's standard practice to order the data for this type of chart, so with all this we can make a simple naive attempt at visualizing this dataset, which basically replicates our previous D3 implementation (except no tooltips).\n\n\n::: {.cell hash='betterDataViz_cache/html/unnamed-chunk-5_4bce8d215b4f41f44eff1b07bff3a8bf'}\n\n```{.r .cell-code}\ndf %>% \n  mutate(Constituency = forcats::fct_reorder(Constituency, Turnout)) %>% \n  ggplot(aes(x = Constituency, y = Turnout)) +\n  geom_col() +\n  labs(x = NULL, y = \"Turnout (%)\") +\n  coord_flip() +\n  theme_minimal()\n```\n:::\n\n\nWall o'bars again. We can reduce this effect by stripping out the bulk of the bars.\n\n\n::: {.cell hash='betterDataViz_cache/html/unnamed-chunk-6_db1a407d53458535dba375aefe473815'}\n\n```{.r .cell-code}\ndf %>% \n  mutate(Constituency = forcats::fct_reorder(Constituency, Turnout)) %>% \n  ggplot(aes(x = Turnout, y = Constituency)) +\n  geom_point() +\n  geom_segment(aes(y = Constituency, yend = Constituency, x = 0, xend = Turnout), linetype = 3) +\n  labs(y = NULL, x = \"Turnout (%)\") +\n  theme_minimal()\n```\n:::\n\n\nOk, that solves our problem of a wall of dark-coloured bars. The dots and the underlying grid serve to connect the labels on the left y-axis to the turnout value on the right, so in this sense, this is not a bad basic chart. We get the general message that most constituencies voted 'Yes' at over 60%, and that Wicklow was the highest 'Yes'-voting area. However, comparison between the constituencies is not easy. Even finding them on the y-axis takes work. To facilitate comparison, we could shorten the x-axis.\n\n\n::: {.cell hash='betterDataViz_cache/html/unnamed-chunk-7_d196782abd72e9cab42fa4a7fcfbdbe5'}\n\n```{.r .cell-code}\ndf %>% \n  mutate(Constituency = forcats::fct_reorder(Constituency, Turnout)) %>% \n  ggplot(aes(x = Turnout, y = Constituency)) +\n  geom_point() +\n  geom_segment(aes(y = Constituency, yend = Constituency, x = 50, xend = Turnout), linetype = 3) +\n  labs(y = NULL, x = \"Turnout (%)\") +\n  theme_minimal() +\n  xlim(50, 75)\n```\n:::\n\n\nThis gives us a much better handle on the difference between constituencies, but comparing them is still difficult. There are a few strategies we can employ. One very useful one is facetting -- we can group the constituencies by some other variable (here, I'll create and use region) and then plot them on individual plots/facets.\n\n\n::: {.cell hash='betterDataViz_cache/html/unnamed-chunk-8_66b0a0133e5afcde401e44a26d402eec'}\n\n```{.r .cell-code}\ndf %>% \n  mutate(Constituency = forcats::fct_reorder(Constituency, Turnout),\n         Region = case_when(\n           Constituency %in% c(\"Clare\", \"Galway West\", \"Galway East\", \"Roscommon-Galway\",\n                                \"Limerick\") ~ \"West\",\n           Constituency %in% c(\"Mayo\", \"Sligo-Leitrim\", \"Donegal\") ~ \"North-West\",\n           Constituency %in% c(\"Dun Laoghaire\", \"Dublin Bay North\", \"Dublin Bay South\", \"Dublin Central\",\n                               \"Dublin Fingal\", \"Dublin Mid-West\", \"Dublin North-West\", \"Dublin Rathdown\",\n                               \"Dublin South-Central\", \"Dublin South-West\", \"Dublin West\", \"Wicklow\", \"Louth\") ~ \"East\",\n           Constituency %in% c(\"Wexford\", \"Waterford\") ~ \"South-East\",\n           Constituency %in% c(\"Cork North-West\", \"Kerry\", \"Cork South-West\", \"Cork South-Central\", \n                               \"Cork North-Central\", \"Cork East\") ~ \"South-West\",\n           TRUE ~ \"Midlands\"\n         )) %>% \n  ggplot(aes(x = Turnout, y = Constituency)) +\n  geom_point() +\n  geom_segment(aes(y = Constituency, yend = Constituency, x = 0, xend = Turnout), linetype = 3) +\n  labs(y = NULL, x = \"Turnout (%)\") +\n  theme_minimal() +\n  facet_grid(~Region)\n```\n:::\n\n\nOk, I don't think we're getting anywhere here, and it looks like our 'shortened x-axis' lollipop plot is the best we've come up with so far -- it avoids heavy bars taking up space and distracting the eye, and allows for comparison among the turnout scores. We could highlight certain constituencies (those in Dublin, for example) to make it more interesting:\n\n\n::: {.cell hash='betterDataViz_cache/html/unnamed-chunk-9_ea2fa0532411bbc29aebc2a5e6041ea7'}\n\n```{.r .cell-code}\nlibrary(stringr)\ndf %>% \n  mutate(Dublin = str_detect(Constituency, \"Dublin\"),\n         y_axis_colour = ifelse(Dublin, \"#050035\", \"grey66\"),\n         Constituency = forcats::fct_reorder(Constituency, Turnout)\n         ) %>% \n  arrange(desc(Turnout)) -> df\n\ny_colours <- df %>% pull(y_axis_colour) %>% rev()\n\nggplot(df, aes(x = Turnout, y = Constituency, colour = Dublin)) +\n  geom_point() +\n  geom_segment(aes(y = Constituency, yend = Constituency, x = 50, xend = Turnout)) +\n  labs(y = NULL, x = \"Turnout (%)\") +\n  theme_minimal() +\n  scale_color_manual(values = c(\"grey63\", \"#050035\")) + \n  theme(legend.position = \"none\") +\n  theme(axis.text.y = element_text(colour = y_colours)) +\n  xlim(50, 75)\n```\n:::\n\n\nIf this was an interactive plot, we could let the user select the region to highlight and I think that would be a pretty useful graphic. I think it also shows us an interesting sub-story in the data -- namely, the comparatively wide variation in Dublin. Regardless, facetting didn't work for us and highlighting regions isn't working very well.\n\n## Including Comparison Data\n\nSince the main message I'm trying to get at is the strong 'Yes' vote, perhaps one way to do that would be to include the previous referendum on divorce in Ireland, which happened in 1995 and made it legal. (Not exactly the same question, but relevant, I think.) I've scraped this dataset from Elections Ireland, and the code is at the bottom of this post. Including these data opens up a new possibility for plotting -- 'dumbbells'. Basically we want to show the change between red and blue below, red being the earlier vote from 1995:\n\n\n::: {.cell hash='betterDataViz_cache/html/unnamed-chunk-10_007e369f27290e27bdabb70e3e17a008'}\n\n```{.r .cell-code}\ndiv1995 <- read_csv(\"https://raw.githubusercontent.com/RobertMyles/blogdata/master/divorce1995.csv\")\n\ndivorce <- full_join(df, div1995) %>% select(-c(Dublin, y_axis_colour))\n\ndivorce %>% \n  mutate(Constituency = forcats::fct_reorder(Constituency, Turnout)) %>% \n  ggplot(aes(y = Constituency)) + \n  geom_segment(aes( yend = Constituency, x = 50, xend = Turnout),\n               colour = \"cornflowerblue\") +\n  geom_segment(aes(yend = Constituency, x = 50, xend = Turnout1995),\n               colour = \"red\") +\n    geom_point(aes(x = Turnout), colour = \"cornflowerblue\") +\n  geom_point(aes(x = Turnout1995), colour = \"red\") +\n  xlim(50, 75) +\n  labs(y = NULL, x = \"Turnout (%)\") +\n  theme_minimal()\n```\n:::\n\n\nWe can do that in a few ways, one of which is the dumbbell plot. The ggalt library for R has a nice dumbbell geom which saves us some code, so I'll use that. The main idea behind a dumbbell plot here is that the change between 1995 and 2019 can be highlighted. While we're at it, let's tidy up the plot in general and make it more presentable. To do this, we'll lighten some of the text, make the y-axis text smaller so there's no overlap, add some annotations to explain what's happening, as well as better titles and a source citation for the data and expand the size a bit.\n\n\n::: {.cell hash='betterDataViz_cache/html/unnamed-chunk-11_59ff19cfd0976083162304be24f473a5'}\n\n```{.r .cell-code}\nlibrary(ggalt)\n\npointer <- arrow(length = unit(5, \"pt\"), type = \"closed\")\nbl <- \"#08415C\"\nrd <- \"#CC2936\"\n\ndivorce %>% \n  mutate(Constituency = forcats::fct_reorder(Constituency, Turnout)) %>%\n  ggplot(aes(y = Constituency)) + \n  geom_dumbbell(aes(x = Turnout1995, xend = Turnout), colour = \"grey63\",\n                colour_x = rd, colour_xend = bl) +\n  theme_minimal() +\n  xlim(50, 75) +\n  geom_curve(\n    data = data.frame(), \n    aes(x = 56, y = 21, xend = 58.5, yend = 18), \n    colour = alpha(rd, 0.6), arrow = pointer\n  ) +\n  annotate(\"text\", label = \"Red points show \\nthe 1995 Divorce \\nReferendum turnout\",\n           x = 55, y = 25, colour = alpha(rd, 0.9), size = 3.5) +\n  geom_curve(\n    data = data.frame(), \n    aes(x = 69, y = 14, xend = 63.75, yend = 18), \n    colour = alpha(bl, 0.6), arrow = pointer) +\n  annotate(\"text\", label = \"Blue points show \\nthe 2019 Divorce \\nReferendum turnout\",\n           x = 70, y = 10, colour = alpha(bl, 0.9), size = 3.5) +\n  labs(title = \"Turnout 1995 v 2019\", subtitle = \"Irish Divorce Referenda, 1995 and 2019\",\n       x = \"Turnout in percentage points\", y = NULL, caption = \"Source: www.electionsireland.org\") +\n  theme(panel.grid.major = element_line(linetype = 2, colour = \"grey92\"),\n        axis.text.y = element_text(colour = \"grey21\", size = 8),\n        plot.subtitle = element_text(colour = \"grey21\"),\n        plot.caption = element_text(colour = \"grey21\")) \n```\n:::\n\n\nThat's not bad at all. We could highlight some specific constituencies (Wicklow, perhaps) and maybe remove the x-axis title and put '%' beside the axis text numbers, but even without these changes it's a big improvement. Another way we could show this information is with a centred bar chart, which goes either left or right depending on the change. We'll need to add another column to our data, but it's trivial to do.\n\n\n::: {.cell hash='betterDataViz_cache/html/unnamed-chunk-12_28dea64749747d61b3aa36d64a192f2a'}\n\n```{.r .cell-code}\ndivorce %>% \n  mutate(\n    difference = Turnout - Turnout1995,\n    is_positive = difference > 0,\n    Constituency = forcats::fct_reorder(Constituency, difference)\n    ) %>% \n  ggplot(aes(y = difference, x = Constituency, fill = is_positive, colour = is_positive)) +\n  geom_col() +\n  coord_flip() +\n  scale_color_manual(values = c(rd, bl)) +\n  scale_fill_manual(values = c(alpha(rd, 0.9), alpha(bl, 0.9))) +\n  theme_minimal() +\n  labs(title = \"Difference in turnout 1995 & 2019\", subtitle = \"Irish Divorce Referenda\",\n       y = \"Difference in turnout percentage\", x = NULL, caption = \"Source: www.electionsireland.org\") +\n  theme(panel.grid.major = element_line(linetype = 2, colour = \"grey92\"),\n        axis.text.y = element_text(colour = \"grey21\"),\n        plot.subtitle = element_text(colour = \"grey21\"),\n        plot.caption = element_text(colour = \"grey21\"),\n        legend.position = \"none\") \n```\n:::\n\n\nLie our earlier plot, we might consider annotating this one to provide more information. A secondary y-axis might be nice to help readers connect the constituency to its difference in turnout. Other options are changing things like fonts and colours (and checking that these work for colour-blind people), but for now I think we've done a pretty good job of taking a wall of bars and teasing apart the interesting stories behind it. We tried various different types of plot and shown the importance of being able to compare a story to something else. And we've made some nice data viz!\n\n## Scraping the 1995 Referendum Data\n\nWe can get the 1995 Divorce referendum data from the [Elections Ireland](https://electionsireland.org/results/referendum/refresult.cfm?ref=1995R) website (thanks, Elections Ireland!). We need to match up some of the Constituency names that have changed, which is straightforward:\n\n\n::: {.cell hash='betterDataViz_cache/html/unnamed-chunk-13_b324493f81c2fa7c1ce247e807e8ee17'}\n\n```{.r .cell-code}\nlibrary(rvest); library(dplyr); library(stringr)\n\nurl <- \"https://electionsireland.org/results/referendum/refresult.cfm?ref=1995R\"\n\nninety5 <- read_html(url) %>% \n  html_node(\"table.conlist\") %>% \n  html_table(fill = TRUE) %>% \n  slice(-c(1:3, 4:5)) %>% \n  select(1, 7) %>% \n  magrittr::set_colnames(value = c(\"Constituency\", \"Turnout\")) %>% \n  slice(1:41) %>% \n  mutate(Turnout = str_remove(Turnout, \"%\"),\n         Turnout = as.numeric(Turnout),\n         Constituency = case_when(\n         Constituency == \"Carlow Kilkenny\" ~ \"Carlow-Kilkenny\",\n         Constituency == \"Cavan Monaghan\" ~ \"Cavan-Monaghan\",\n         Constituency == \"Cork North Central\" ~ \"Cork North-Central\",\n         Constituency == \"Cork North West\" ~ \"Cork North-West\",\n         Constituency == \"Cork South Central\" ~ \"Cork South-Central\",\n         Constituency == \"Cork South West\" ~ \"Cork South-West\",\n         Constituency == \"Dublin South East\" ~ \"Dublin Bay South\",\n         Constituency == \"Dublin South West\" ~ \"Dublin South-West\",\n         Constituency == \"Dublin South\" ~ \"Dublin Rathdown\",\n         Constituency == \"Dublin North\" ~ \"Dublin Fingal\",\n         Constituency == \"Dublin North West\" ~ \"Dublin North-West\",\n         Constituency == \"Dublin South Central\" ~ \"Dublin South-Central\",\n         Constituency == \"Dún Laoghaire\" ~ \"Dun Laoghaire\",\n         Constituency == \"Sligo Leitrim\" ~ \"Sligo-Leitrim\",\n         TRUE ~ Constituency\n         ))\n```\n:::\n\n\nNow we face a slightly trickier problem -- since 1995, some new constituencies have been created and others have been abolished (see [here](https://en.wikipedia.org/wiki/Electoral_(Amendment)_(D%C3%A1il_Constituencies)_Act_2013). For those that have been amalgamated, we can simply take the mean of the two previous constituencies.\n\n\n::: {.cell hash='betterDataViz_cache/html/unnamed-chunk-14_679ca248139893207170cfa661457349'}\n\n```{.r .cell-code}\nget_mean <- function(constituency) {\n  ninety5 %>% \n    filter(str_detect(Constituency, constituency)) %>% \n    pull(Turnout) %>% mean() %>% round(2) -> mean_turnout\n  return(mean_turnout)\n}\n\ndub_north_mean <- ninety5 %>% \n  filter(Constituency %in% c(\"Dublin North East\", \"Dublin North Central\")) %>% \n  pull(Turnout) %>%  mean() %>% round(2)\nlim_mean <- ninety5 %>% \n  filter(Constituency %in% c(\"Limerick East\", \"Limerick West\")) %>% \n  pull(Turnout) %>%  mean() %>% round(2)\ndonegal_mean <- get_mean(\"Donegal\")\ntipp_mean <- get_mean(\"Tipperary\")\nkerry_mean <- get_mean(\"Kerry\")\nmayo_mean <- get_mean(\"Mayo\")\n\nninety5 <- ninety5 %>% \n  add_row(\n    Constituency = c(\"Dublin Bay North\", \"Donegal\", \"Tipperary\", \"Kerry\", \"Mayo\",\n                     \"Limerick City\", \"Limerick\"),\n    Turnout = c(dub_north_mean, donegal_mean, tipp_mean, kerry_mean, mayo_mean,\n                lim_mean, lim_mean)\n  ) %>% \n  filter(!Constituency %in% c(\"Tipperary North\", \"Tipperary South\",\n                              \"Mayo East\", \"Mayo West\", \"Kerry North\",        \n                              \"Kerry South\", \"Donegal North East\",\n                              \"Donegal South West\",\"Dublin North East\",\n                              \"Dublin North Central\", \"Limerick East\",\n                              \"Limerick West\"))\n```\n:::\n\n\nFor constituencies that have since been split into two, we can just use the value for the original constituency. For the Longford-Roscommon-Westmeath-Galway mess, I'm just going to take the mean of the constituencies that have joined. The turnout was pretty similar anyway, so we're not changing much here.\n\n\n::: {.cell hash='betterDataViz_cache/html/unnamed-chunk-15_8fb00bc1db1a754705b747a903914769'}\n\n```{.r .cell-code}\n# split Laois Offaly & Meath & Kildare\nninety5 <- ninety5 %>% \n  add_row(\n    Constituency = c(\"Laois\", \"Offaly\", \"Meath East\", \"Meath West\",\n                     \"Kildare North\", \"Kildare South\", \"Dublin Mid-West\"),\n    Turnout = c(rep(63.02, 2), rep(59.58, 2), rep(61.72, 2), 62.37)\n  ) %>% \n  filter(!Constituency %in% c(\"Kildare\", \"Meath\", \"Laoighis Offaly\"))\n\n\n# longford-roscommon-westmeath-galway\nninety5 <- ninety5 %>% \n  add_row(\n    Constituency = c(\"Longford-Westmeath\", \"Roscommon-Galway\"),\n    Turnout = c(60.07, 60.17)\n  ) %>% \n  filter(!Constituency %in% c(\"Longford Roscommon\", \"Westmeath\"))\n```\n:::\n\n\nGots our data! As usual, it can be found [here](https://github.com/RobertMyles/blogdata).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}